<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test extension

down[0] = false;
pressed[0] = false;
released[0] = false;

// Initialize
controls_init();

//
controls_create("up", "vk_up");
controls_create("left", "vk_left");
controls_create("down", "vk_down");
controls_create("right", "vk_right");
controls_create("lalt", "vk_lalt");
controls_create("ralt", "vk_ralt");
controls_create("alt", "vk_alt");
controls_create("lcontrol", "vk_lcontrol");
controls_create("rcontrol", "vk_rcontrol");
controls_create("control", "vk_control");
controls_create("lshift", "vk_lshift");
controls_create("rshift", "vk_rshift");
controls_create("shift", "vk_shift");
controls_create("lmb", "mb_left");
controls_create("rmb", "mb_right");
controls_create("mmb", "mb_middle");
controls_create("mw_up", "mw_up");
controls_create("mw_down", "mw_down");
controls_create("random", "vk_space");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update buffer

controls_buffer_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update

// 
var i, length;
length = controls_newid;
for (i = 0; i &lt; length; i++)
{
    down[i] = controls_check(i);
    pressed[i] = controls_check_pressed(i);
    released[i] = controls_check_released(i);
}

//
if (controls_check_pressed_name("lmb"))
{
    var c, cid;
    randomize();
    switch (floor(random(5)))
    {
        case 0:
            c = "vk_left";
            break;
        case 1:
            c = "vk_right";
            break;
        case 2:
            c = "vk_up";
            break;
        case 3:
            c = "vk_down";
            break;
        case 4:
            c = "vk_space";
            break;
    }
    cid = controls_find_id("random");
    controls_set_control(cid, c);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws testing progress

var i, length, text, color;
length = controls_newid;
for (i = 0; i &lt; length; i++)
{
    text = string(controls_get_name(i)) +
           "(type: " + string(controls_get_type(i)) + ") " + 
           "(" + controls_get_control_name(i) + ":" + string(controls_get_control(i)) + ") ";
    
    // Color (down)
    if (down[i] == true)
        color = c_green;
    else
        color = c_red;
    
    // Pressed
    if (pressed[i])
        text += "PRESSED! ";
        
    // Released
    if (released[i])
        text += "RELEASED! ";
    
    // Draw
    draw_text_color(5, 5 + i * 15, text, color, color, color, color, 1.0);
}

var name;
for (i = 0; i &lt; length; i++)
{
    name = controls_get_name(i);
    text = "(" + name + ":" + controls_get_name(controls_find_id(name)) + ") ";
    
    // Draw
    draw_text(320, 5 + i * 15, text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
